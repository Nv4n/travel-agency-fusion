// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

//* User models
model User {
    id           String        @id @unique @default(cuid())
    email        String        @unique
    password     String
    fname        String
    lname        String
    roles        Role[]        @default([USER])
    reservations Reservation[]
    properties   Property[]
    chatUsers    ChatUser[]
    reviews      Review[]

    @@index([id])
}

enum Role {
    USER
    PROPERTYOWNER
    SUPPORT
}

//* ChatTicket models
model ChatTicket {
    id   String   @id @default(cuid())
    type ChatType

    chatUsers ChatUser[]
}

enum ChatType {
    TOSUPPORT
    TOPROPERTY
}

model ChatUser {
    id           String     @unique @default(cuid())
    chatTicket   ChatTicket @relation(fields: [chatTicketId], references: [id])
    chatTicketId String     @map("chat_ticket_id")
    user         User       @relation(fields: [userId], references: [id])
    userId       String
    chatRole     ChatRole
    messages     Message[]

    @@id([id, chatTicketId, userId])
}

enum ChatRole {
    RECEIVER
    SENDER
}

model Message {
    id         String   @id @unique @default(cuid())
    chatUserId String
    content    String
    chatUser   ChatUser @relation(fields: [chatUserId], references: [id])
}

model Review {
    id         String   @unique @default(uuid())
    propertyId String
    userId     String
    rating     Int      @default(5) @db.SmallInt
    content    String
    property   Property @relation(fields: [propertyId], references: [id])
    user       User     @relation(fields: [userId], references: [id])

    @@id([id, propertyId, userId])
}

//* Property/Hotel models
model Reservation {
    id     String @default(cuid())
    userId String
    roomId String
    price  Float
    room   Room   @relation(fields: [roomId], references: [id])
    user   User   @relation(fields: [userId], references: [id])

    @@id([id, userId, roomId])
    @@index([id, userId, roomId])
}

model Property {
    id          String   @unique @default(cuid())
    ownerId     String
    description String
    owner       User     @relation(fields: [ownerId], references: [id])
    rooms       Room[]
    reviews     Review[]

    @@id([id, ownerId])
}

model Room {
    id           String        @id @unique @default(cuid())
    hotelId      String
    quantity     Int
    available    Int
    maxGuests    Int           @map("max_guests")
    price        Float
    reservations Reservation[]
    facilities   Facility[]
    hotel        Property      @relation(fields: [hotelId], references: [id])
}

model Facility {
    id          String   @id @default(cuid())
    iconId      String?
    description String
    category    Category
    icon        Icon
    rooms       Room[]
}

enum Category {
    ROOM
    FOOD
    BEVERAGES
    WELLNESS
    MISCELLANEOUS
}

enum Icon {
    BED
    WIFI
    FITNESS
    RESTAURANT
    NOSMOKE
    SOUNDPROOF
    BAR
    AC
    PARKING
    SPA
    BREAKFAST
    FRIDGE
    KITCHEN
}

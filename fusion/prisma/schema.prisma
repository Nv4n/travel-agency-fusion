// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

//* User models
model User {
    id       String    @id @default(cuid())
    email    String    @unique
    password Password?
    roles    Role[]    @default([USER])

    fname String
    lname String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    reservations Reservation[]
    properties   Property[]
    chatUsers    ChatUser[]
    reviews      Review[]

    @@index([id])
}

model Password {
    hash String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String @unique
}

enum Role {
    USER
    PROPERTYOWNER
    SUPPORT
}

//* ChatTicket models
model ChatTicket {
    id   String   @id @default(cuid())
    type ChatType

    chatUsers ChatUser[]
}

enum ChatType {
    TOSUPPORT
    TOPROPERTY
}

model ChatUser {
    id       String    @unique @default(cuid())
    chatRole ChatRole
    messages Message[]

    chatTicket   ChatTicket @relation(fields: [chatTicketId], references: [id])
    chatTicketId String     @map("chat_ticket_id")
    user         User       @relation(fields: [userId], references: [id])
    userId       String

    @@id([id, chatTicketId, userId])
}

enum ChatRole {
    RECEIVER
    SENDER
}

model Message {
    id      String @id @default(cuid())
    content String //@db.VarChar(512)

    chatUser   ChatUser @relation(fields: [chatUserId], references: [id])
    chatUserId String
}

model Review {
    id      String @unique @default(uuid())
    rating  Int    @default(5) @db.SmallInt
    content String //@db.VarChar(255)

    createdAt DateTime @default(now())

    property   Property @relation(fields: [propertyId], references: [id])
    propertyId String
    user       User     @relation(fields: [userId], references: [id])
    userId     String

    @@id([id, propertyId, userId])
}

//* Property/Hotel models
model Reservation {
    id    String   @default(cuid())
    price Float
    from  DateTime
    to    DateTime

    room   Room   @relation(fields: [roomId], references: [id])
    roomId String
    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@id([id, userId, roomId])
    @@index([id, userId, roomId])
}

model Property {
    id          String @unique @default(cuid())
    description String

    owner   User     @relation(fields: [ownerId], references: [id])
    ownerId String
    rooms   Room[]
    reviews Review[]

    @@id([id, ownerId])
}

model Room {
    id        String @id @unique @default(cuid())
    quantity  Int
    available Int //not sure i need this
    maxGuests Int    @map("max_guests")
    price     Float

    hotel        Property      @relation(fields: [hotelId], references: [id])
    hotelId      String
    reservations Reservation[]
    facilities   Facility[]
}

model Facility {
    id          String   @id @default(cuid())
    iconId      String?
    description String
    category    Category
    icon        Icon
    rooms       Room[]
}

enum Category {
    ROOM
    FOOD
    BEVERAGES
    WELLNESS
    MISCELLANEOUS
}

enum Icon {
    BED
    WIFI
    FITNESS
    RESTAURANT
    NOSMOKE
    SOUNDPROOF
    BAR
    AC
    PARKING
    SPA
    BREAKFAST
    FRIDGE
    KITCHEN
}
